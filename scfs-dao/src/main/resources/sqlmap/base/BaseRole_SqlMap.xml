<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.scfs.dao.base.entity.BaseRoleDao">
	<resultMap id="BaseResultMap" type="com.scfs.domain.base.entity.BaseRole">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="state" property="state" jdbcType="TINYINT" />
		<result column="creator" property="creator" jdbcType="VARCHAR" />
		<result column="deleter" property="deleter" jdbcType="VARCHAR" />
		<result column="locker" property="locker" jdbcType="VARCHAR" />
		<result column="lock_at" property="lockAt" jdbcType="TIMESTAMP" />
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
		<result column="update_at" property="updateAt" jdbcType="TIMESTAMP" />
		<result column="delete_at" property="deleteAt" jdbcType="TIMESTAMP" />
		<result column="is_delete" property="isDelete" jdbcType="TINYINT" />
	</resultMap>
	<sql id="Base_Column_List">
		id, name,state, creator, deleter, create_at, update_at,
		delete_at,
		is_delete,locker,lock_at
	</sql>
	<sql id="permissionGroupRole">
		r.id, r.name,r.state, r.creator, r.deleter, r.create_at,
		r.update_at,
		r.delete_at, r.is_delete,r.locker,r.lock_at
	</sql>
	<select id="queryBaseRoleById" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from tb_base_role
		where id=#{id,jdbcType=BIGINT}
	</select>
	<!--根据用户名查询角色信息 -->
	<select id="queryBaseRoleListByUserName" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		r.id id,r.name name
		from tb_base_role r INNER JOIN
		tb_base_user_roles ur ON r.id=ur.role_id
		INNER JOIN tb_base_user u ON
		ur.user_id=u.id
		where u.user_name = #{VALUE }
	</select>
	<!--根据用户名查询角色信息 -->
	<select id="queryRoleByPermissionGroup" resultMap="BaseResultMap"
		parameterType="com.scfs.domain.base.dto.req.BasePermissionGroupReqDto">
		select
		<include refid="permissionGroupRole" />
		from tb_base_role r INNER JOIN tb_base_role_permission_group ur ON
		r.id=ur.role_id
		where ur.permission_group_id = #{permissionGroupId}
		and
		ur.is_delete = 0
		and r.is_delete = 0
	</select>

	<select id="queryBaseRoleList" resultMap="BaseResultMap"
		parameterType="com.scfs.domain.base.dto.req.BaseRoleReqDto">
		select
		<include refid="Base_Column_List" />
		from tb_base_role
		<where>
			<if test="name != null and name != ''">
				name like CONCAT('%',#{name},'%')
			</if>
			<if test="state != null">
				AND state=#{state}
			</if>
		</where>
		ORDER BY id DESC
	</select>


	<insert id="insert" parameterType="com.scfs.domain.base.entity.BaseRole"
		useGeneratedKeys="true" keyProperty="id">
		insert into tb_base_role (id,
		name,state, creator,
		deleter, create_at, update_at,
		delete_at)
		values
		(#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR},
		#{state,jdbcType=TINYINT},#{creator,jdbcType=VARCHAR},
		#{deleter,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP},
		#{updateAt,jdbcType=TIMESTAMP},
		#{deleteAt,jdbcType=TIMESTAMP})
	</insert>
	<update id="update" parameterType="com.scfs.domain.base.entity.BaseRole">
		update tb_base_role
		<set>
			<if test="name != null">
				name=#{name},
			</if>
			<if test="state != null">
				state=#{state},
			</if>
			<if test="deleter != null">
				deleter=#{deleter},
			</if>
			<if test="deleteAt != null">
				delete_at=#{deleteAt},
			</if>
			<if test="locker != null">
				locker=#{locker},
			</if>
			<if test="lockAt != null">
				lock_at=#{lockAt},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>


	<select id="queryDividRoleByUserId" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		SELECT ur.id, ur.user_id, ur.role_id, ur.state,
		ur.creator,
		ur.create_at,r.name,ur.delete_at,ur.deleter
		from
		tb_base_user_roles ur INNER JOIN tb_base_role r ON ur.role_id=r.id
		WHERE ur.user_id=#{userId}
		ORDER BY ur.id DESC
	</select>

	<select id="queryUnDividRoleByUserId" resultMap="BaseResultMap"
		parameterType="com.scfs.domain.base.dto.req.BaseUserRoleReqDto">
		SELECT role.id, role.name, role.state FROM tb_base_role role
		WHERE
		role.is_delete=0 AND role.state=2
		<if test="roleName != null and roleName !='' ">
			AND role.name=#{roleName}
		</if>
		AND role.id NOT IN(SELECT ur.role_id from tb_base_user_roles ur where
		ur.user_id=#{userId,jdbcType=BIGINT} AND ur.is_delete=0)
	</select>


	<select id="queryAll" resultMap="BaseResultMap" parameterType="java.lang.String">
		SELECT DISTINCT id, name,state,is_delete
		FROM tb_base_role
		<where>
			<if test="updateAt != null">
        <![CDATA[
                update_at > #{updateAt}
                ]]>
			</if>
		</where>
	</select>

	<select id="queryLastUpdateAt" resultType="java.util.Date">
		select
		max(update_at)
		from tb_base_role

	</select>


	<select id="queryRoleByUserByRole" resultMap="BaseResultMap"
		parameterType="com.scfs.domain.base.dto.req.BaseUserRoleReqDto">
		SELECT ur.id, ur.user_id, ur.role_id, ur.state, ur.creator,
		ur.create_at,r.name,ur.delete_at,ur.deleter
		from tb_base_user_roles ur
		INNER JOIN tb_base_role r ON ur.role_id=r.id
		WHERE 1=1
		<if test="userId != null">
			AND ur.user_id=#{userId}
		</if>
		<if test="roleId != null">
			AND ur.role_id=#{roleId}
		</if>
		ORDER BY ur.id DESC
	</select>
</mapper>