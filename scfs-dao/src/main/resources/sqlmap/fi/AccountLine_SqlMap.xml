<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.scfs.dao.fi.AccountLineDao">
	<resultMap type="com.scfs.domain.fi.entity.AccountLine" id="accountLineResultMap">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="account_line_no" property="accountLineNo"
			jdbcType="VARCHAR" />
		<result column="account_line_name" property="accountLineName"
			jdbcType="VARCHAR" />
		<result column="account_line_type" property="accountLineType"
			jdbcType="INTEGER" />
		<result column="account_line_level" property="accountLineLevel"
			jdbcType="INTEGER" />
		<result column="debit_or_credit" property="debitOrCredit"
			jdbcType="INTEGER" />
		<result column="need_project" property="needProject" jdbcType="INTEGER" />
		<result column="need_supplier" property="needSupplier"
			jdbcType="INTEGER" />
		<result column="need_cust" property="needCust" jdbcType="INTEGER" />
		<result column="need_account" property="needAccount" jdbcType="INTEGER" />
		<result column="need_tax_rate" property="needTaxRate" jdbcType="INTEGER" />
		<result column="need_user" property="needUser" jdbcType="INTEGER" />
		<result column="need_inner_busi_unit" property="needInnerBusiUnit"
			jdbcType="INTEGER" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<result column="is_last" property="isLast" jdbcType="INTEGER" />
		<result column="creator_id" property="creatorId" jdbcType="INTEGER" />
		<result column="creator" property="creator" jdbcType="VARCHAR" />
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
		<result column="is_delete" property="isDelete" jdbcType="INTEGER" />
		<result column="deleter_id" property="deleterId" jdbcType="INTEGER" />
		<result column="deleter" property="deleter" jdbcType="VARCHAR" />
		<result column="delete_at" property="deleteAt" jdbcType="TIMESTAMP" />
		<result column="accout_line_state" property="accoutLineState"
			jdbcType="INTEGER" />
	</resultMap>
	<sql id="account_line_column_list">
		id , account_line_no , account_line_name ,
		account_line_type , account_line_level , debit_or_credit ,
		need_project , need_supplier , need_cust ,
		need_account , need_tax_rate
		, need_user , need_inner_busi_unit , state , is_last , creator_id ,
		creator , create_at , is_delete,accout_line_state
	</sql>
	<insert id="insert" parameterType="com.scfs.domain.fi.entity.AccountLine">
		insert into
		tb_fi_account_line(
		account_line_no,
		account_line_name,
		account_line_type,
		account_line_level,
		debit_or_credit,
		need_project,
		need_supplier,
		need_cust,
		need_account,
		need_tax_rate,
		need_user,
		need_inner_busi_unit,
		state,
		is_last,
		creator_id,
		creator,
		accout_line_state
		)
		values(
		#{accountLineNo},
		#{accountLineName},
		#{accountLineType},
		#{accountLineLevel},
		#{debitOrCredit},
		#{needProject},
		#{needSupplier},
		#{needCust},
		#{needAccount},
		#{needTaxRate},
		#{needUser},
		#{needInnerBusiUnit},
		#{state},
		#{isLast},
		#{creatorId},
		#{creator},
		#{accoutLineState}
		)
	</insert>
	<select id="queryResultsByCond" parameterType="com.scfs.domain.fi.dto.req.AccountLineSearchReqDto"
		resultMap="accountLineResultMap">
		select
		<include refid="account_line_column_list" />
		from tb_fi_account_line
		where is_delete = 0
		and accout_line_state=1
		<if test="accountLineNo != null and accountLineNo != '' ">
			and account_line_no like CONCAT(#{accountLineNo} , '%')
		</if>
		<if test="accountLineName != null and accountLineName != ''">
			and account_line_name like CONCAT('%', #{accountLineName}
			, '%')
		</if>
		<if test="accountLineType != null">
			and account_line_type = #{accountLineType}
		</if>
		<if test="debitOrCredit != null">
			and debit_or_credit = #{debitOrCredit}
		</if>
		<if test="accountLineLevel != null">
			and account_line_level = #{accountLineLevel}
		</if>
		<if test="state != null">
			and state = #{state}
		</if>
		<if test="isLast != null">
			and is_last = #{isLast}
		</if>
		<if test="accountBookId != null">
			and id not in (select account_line_id from
			tb_fi_account_book_line_rel
			rel where rel.account_book_id =
			#{accountBookId} and rel.state = 1)
		</if>
		order by account_line_no
	</select>
	<select id="queryAllAccountLine" resultMap="accountLineResultMap"
		parameterType="java.lang.String">
		select
		<include refid="account_line_column_list" />
		from tb_fi_account_line
		<where>
			<if test="updateAt != null">
				<![CDATA[
                update_at > #{updateAt}
                ]]>
			</if>
		</where>
	</select>

	<select id="queryLastUpdateAt" resultType="java.util.Date">
		select
		max(update_at)
		from tb_fi_account_line
	</select>

	<select id="queryEntityById" parameterType="java.lang.Integer"
		resultMap="accountLineResultMap">
		select
		<include refid="account_line_column_list" />
		from tb_fi_account_line
		where id=#{id} for update
	</select>

	<select id="queryAccountLineByNoAndName" resultMap="accountLineResultMap">
		select
		<include refid="account_line_column_list" />
		from tb_fi_account_line
		where account_line_no like
		CONCAT(#{accountLineNo}, '%')
		AND account_line_name =
		#{accountLineName}
		AND accout_line_state = 1
		AND is_delete = 0
		AND state
		= 2
	</select>

	<update id="updateById" parameterType="com.scfs.domain.fi.entity.AccountLine">
		update tb_fi_account_line
		<set>
			<if test="accountLineNo != null">
				account_line_no = #{accountLineNo},
			</if>
			<if test="accountLineName != null">
				account_line_name = #{accountLineName},
			</if>
			<if test="accountLineType != null">
				account_line_type = #{accountLineType},
			</if>
			<if test="debitOrCredit != null">
				debit_or_credit = #{debitOrCredit},
			</if>
			<if test="accountLineLevel != null">
				account_line_level = #{accountLineLevel},
			</if>
			<if test="needProject != null">
				need_project = #{needProject},
			</if>
			<if test="needSupplier != null">
				need_supplier = #{needSupplier},
			</if>
			<if test="needCust != null">
				need_cust = #{needCust},
			</if>
			<if test="needAccount != null">
				need_account = #{needAccount},
			</if>
			<if test="needTaxRate != null">
				need_tax_rate = #{needTaxRate},
			</if>
			<if test="needUser != null">
				need_user = #{needUser},
			</if>
			<if test="needInnerBusiUnit != null">
				need_inner_busi_unit = #{needInnerBusiUnit},
			</if>
			<if test="isLast != null">
				is_last = #{isLast}
			</if>
		</set>
		where id=#{id}
	</update>
	<update id="lockById" parameterType="com.scfs.domain.fi.entity.AccountLine">
		update tb_fi_account_line
		set state = #{state} , locked_by = #{lockedBy} , locked_by_id =
		#{locked_by_id} , lock_at = #{lockAt}
		where id=#{id}
	</update>
	<update id="deleteById" parameterType="com.scfs.domain.fi.entity.AccountLine">
		update tb_fi_account_line
		set is_delete = #{isDelete} , deleter = #{deleter} , delete_at =
		#{deleteAt} , deleter_id = #{deleterId}
		where id=#{id}
	</update>
	<update id="submitById" parameterType="java.lang.Integer">
		update tb_fi_account_line
		set state = #{state}
		where id=#{id}
	</update>
</mapper>